给定一个 完美二叉树 ，其所有叶子节点都在同一层，每个父节点都有两个子节点。二叉树定义如下：

struct Node {
  int val;
  Node *left;
  Node *right;
  Node *next;
}
填充它的每个 next 指针，让这个指针指向其下一个右侧节点。如果找不到下一个右侧节点，则将 next 指针设置为 NULL。

初始状态下，所有 next 指针都被设置为 NULL。


/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}
    
    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _left, Node _right, Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/

class Solution {
    public Node connect(Node root) {
        if(root==null) return root;
        connectTwoNode(root.left, root.right);
        return root;
    }

    void connectTwoNode(Node leftNode,Node rightNode){
        if(leftNode==null || rightNode==null) return;   //如果两个节点中有一个为null则无需做任何操作（因为next初始化就为null）
        leftNode.next=rightNode;
        connectTwoNode(leftNode.left,leftNode.right);
        connectTwoNode(rightNode.left,rightNode.right);
        connectTwoNode(leftNode.right,rightNode.left);   //关键！将不是同一个父节点的相邻节点连接起来！

    }
}


