给定二叉搜索树（BST）的根节点和要插入树中的值，将值插入二叉搜索树。 返回插入后二叉搜索树的根节点。 输入数据 保证 ，新值和原始二叉搜索树中的任意节点值都不同。

注意，可能存在多种有效的插入方式，只要树在插入后仍保持为二叉搜索树即可。 你可以返回 任意有效的结果 。

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode insertIntoBST(TreeNode root, int val) {
        if(root==null) return new TreeNode(val);  //这一步是关键！插入节点的关键操作！找到合适的位置后插入新的节点！！
        if(val<root.val) root.left=insertIntoBST(root.left,val);  //理解root.left=………  因为返回的是根节点！所以将insertIntoBST(root.left,val)返回的节点赋给root.left！！
        if(val>root.val) root.right=insertIntoBST(root.right, val);
        return root;  //注意最后要返回根节点！
    }

}
