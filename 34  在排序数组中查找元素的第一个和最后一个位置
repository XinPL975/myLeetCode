给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。

如果数组中不存在目标值 target，返回 [-1, -1]。

示例 1：

输入：nums = [5,7,7,8,8,10], target = 8
输出：[3,4]

示例 2：

输入：nums = [5,7,7,8,8,10], target = 6
输出：[-1,-1]

示例 3：

输入：nums = [], target = 0
输出：[-1,-1]


class Solution {
    public int[] searchRange(int[] nums, int target) {
        if(nums.length==0) return new int[]{-1,-1};    //注意一下Java中数组的声明方式！new int[]{-1,-1}  数组内容是用大括号括起来！！
        int left=0;
        int right=nums.length-1;
        while(left<=right){
            int mid=left+(right-left)/2;
            if(nums[mid]<target){
                left=mid+1;    
            }else if(nums[mid]>target){
                right=mid-1;
            }else if(nums[mid]==target){                //注意！这一段是找出给定目标值在数组中的开始位置和结束位置的核心代码！
                int start=mid;
                int end=mid;
                while(start>0 && nums[start-1]==target){    //一定要注意判断是否越界！！是否满足start>0、end<nums.length-1，满足才能继续操作 否则数组越界！
                    start--;
                }
                while(end<nums.length-1 && nums[end+1]==target){
                    end++;
                }
                return new int[]{start,end};
            }

        }
        return new int[]{-1,-1};
    }
}
