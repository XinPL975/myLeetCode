给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 -1。

你可以认为每种硬币的数量是无限的。

示例 1：

输入：coins = [1, 2, 5], amount = 11
输出：3 
解释：11 = 5 + 5 + 1


class Solution {
    public int coinChange(int[] coins, int amount) {
        if(amount==0) return 0;    //不管什么时候都先返回初始特殊情况
        int[] arr=new int[amount+1];    
        for(int i=0;i<arr.length;i++){
            arr[i]=amount+1;      //初始化数组
        }
        arr[0]=0;                //不要忘记给数组的初始特殊情况赋值
        for(int i=0;i<arr.length;i++){
            for(int coin:coins){
                if(coin>i) continue;
                arr[i]=Math.min(arr[i],arr[i-coin]+1);    //java中的min函数在Math包下！
            }
        }
        if(arr[amount]==amount+1){
            return -1 ;
        }else{
            return arr[amount];
            }
    }
}
