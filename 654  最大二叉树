给定一个不含重复元素的整数数组 nums 。一个以此数组直接递归构建的 最大二叉树 定义如下：

二叉树的根是数组 nums 中的最大元素。
左子树是通过数组中 最大值左边部分 递归构造出的最大二叉树。
右子树是通过数组中 最大值右边部分 递归构造出的最大二叉树。
返回有给定数组 nums 构建的 最大二叉树 。

输入：nums = [3,2,1,6,0,5]
输出：[6,3,5,null,2,0,null,null,1]
解释：递归调用如下所示：
- [3,2,1,6,0,5] 中的最大值是 6 ，左边部分是 [3,2,1] ，右边部分是 [0,5] 。
    - [3,2,1] 中的最大值是 3 ，左边部分是 [] ，右边部分是 [2,1] 。
        - 空数组，无子节点。
        - [2,1] 中的最大值是 2 ，左边部分是 [] ，右边部分是 [1] 。
            - 空数组，无子节点。
            - 只有一个元素，所以子节点是一个值为 1 的节点。
    - [0,5] 中的最大值是 5 ，左边部分是 [0] ，右边部分是 [] 。
        - 只有一个元素，所以子节点是一个值为 0 的节点。
        - 空数组，无子节点。


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
 法一 按照思路自己写的 有些许不完美（时间稍长，4ms）
class Solution {
    public TreeNode constructMaximumBinaryTree(int[] nums) {
        TreeNode root=null;
        if(nums.length==0) return root;
        int max=nums[0];
        int maxIndex=0;
        for(int i=1;i<nums.length;i++){
            if(max<nums[i]){
                max=nums[i];
                maxIndex=i;
            }
        }
        root=new TreeNode(max);    //不要忘记new！！
        int[] numsLeft=new int[maxIndex];             //在自己写的这一版代码中，构造最大值左边和右边的数组显得有点复杂不简洁！
        int[] numsRight=new int[nums.length-maxIndex-1];
        for(int i=0;i<nums.length;i++){
            if(i<maxIndex) numsLeft[i]=nums[i];
            if(i>maxIndex) numsRight[i-maxIndex-1]=nums[i];
        }
        root.left=constructMaximumBinaryTree(numsLeft);
        root.right=constructMaximumBinaryTree(numsRight);
        return root;
    }
}


法二 针对法一存在的问题做了改进 时间大大减少（2ms）
class Solution {
    public TreeNode constructMaximumBinaryTree(int[] nums) {
        return bulid(nums,0,nums.length-1);
    }
    
    TreeNode bulid(int[] nums,int start,int end){   //这个方法的构造非常巧妙 有效避免了法一中构造左边和右边的新数组的麻烦
        if(nums.length==0 || start>end) return null;
        int max=Integer.MIN_VALUE;  //注意这里的初始化！用的Integer.MIN_VALUE作为初始化的最小值。 其实也可以像法一那样将数组的第一个值作为初始化的值将第一个索引start作为索引的初始值
        int maxIndex=-1;
        for(int i=start;i<=end;i++){
            if(max<nums[i]){
                max=nums[i];
                maxIndex=i;
            }
        }
        TreeNode root=new TreeNode(max);
        root.left=bulid(nums,start,maxIndex-1);
        root.right=bulid(nums,maxIndex+1,end);
        return root;
    }
}
