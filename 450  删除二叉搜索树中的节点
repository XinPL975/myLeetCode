给定一个二叉搜索树的根节点 root 和一个值 key，删除二叉搜索树中的 key 对应的节点，并保证二叉搜索树的性质不变。返回二叉搜索树（有可能被更新）的根节点的引用。

一般来说，删除节点可分为两个步骤：

首先找到需要删除的节点；
如果找到了，删除它。
说明： 要求算法时间复杂度为 O(h)，h 为树的高度。

示例:

root = [5,3,6,2,4,null,7]
key = 3

    5
   / \
  3   6
 / \   \
2   4   7

给定需要删除的节点值是 3，所以我们首先找到 3 这个节点，然后删除它。

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

class Solution {
    public TreeNode deleteNode(TreeNode root, int key) {
        if(root==null) return root;
        if(root.val==key){  //以下是找到了key 开始删除
            if(root.left==null && root.right==null) return null;   //千万注意！！！以下几个if后面必须要直接return  因为这几个if语句有重叠的部分  否则后面的会覆盖前面的信息！！
            if(root.left==null) return root.right;
            if(root.right==null) return root.left;
            
            //走到这里说明root.left和root.right均不为null
            TreeNode minNode=getMin(root.right);
            root.val=minNode.val;
            root.right=deleteNode(root.right, minNode.val);
            
        }else if(root.val<key){  //理解delete函数返回删除后的根节点  所以用root.right=……
            root.right=deleteNode(root.right, key);
        }else if(root.val>key){
            root.left=deleteNode(root.left, key);
        }
        return root;

    }
    //这个函数的作用是找到以root为根节点的二叉搜索树的最小值  （就找最左边的值）
    TreeNode getMin(TreeNode root){
        while(root.left !=null) {
            root=root.left;
        }
        return root;
    }

    
}
