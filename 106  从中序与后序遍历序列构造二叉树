根据一棵树的中序遍历与后序遍历构造二叉树。

注意:
你可以假设树中没有重复的元素。

例如，给出

中序遍历 inorder = [9,3,15,20,7]
后序遍历 postorder = [9,15,7,20,3]
返回如下的二叉树：

    3
   / \
  9  20
    /  \
   15   7

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
 注：这道题与 105. 从前序与中序遍历序列构造二叉树 非常相像 只要理解前序、中序、后序遍历的特点即可（主要是遍历后的根节点位置、左右节点部分）
class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        return build(inorder,0,inorder.length-1,postorder,0,postorder.length-1);
    }

    TreeNode build(int[] inorder,int inStart,int inEnd,int[] postorder,int postStart,int postEnd){
        if(inorder.length==0 || inStart>inEnd) return null;
        TreeNode root=new TreeNode(postorder[postEnd]);
        int inIndex=-1;
        for(int i=inStart;i<=inEnd;i++){
            if(inorder[i]==postorder[postEnd]){
                inIndex=i;
                break;
            }
        }
        root.left=build(inorder,inStart,inIndex-1,postorder,postStart,postStart+inIndex-inStart-1);
        root.right=build(inorder,inIndex+1,inEnd,postorder,postStart+inIndex-inStart,postEnd-1);
        return root;
    }

}

