给定两个由一些 闭区间 组成的列表，firstList 和 secondList ，其中 firstList[i] = [starti, endi] 而 secondList[j] = [startj, endj] 。每个区间列表都是成对 不相交 的，并且 已经排序 。

返回这 两个区间列表的交集 。

形式上，闭区间 [a, b]（其中 a <= b）表示实数 x 的集合，而 a <= x <= b 。

两个闭区间的 交集 是一组实数，要么为空集，要么为闭区间。例如，[1, 3] 和 [2, 4] 的交集为 [2, 3] 。

示例 1：

输入：firstList = [[0,2],[5,10],[13,23],[24,25]], secondList = [[1,5],[8,12],[15,24],[25,26]]
输出：[[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]

示例 2：

输入：firstList = [[1,3],[5,9]], secondList = []
输出：[]

示例 3：

输入：firstList = [], secondList = [[4,8],[10,12]]
输出：[]

示例 4：

输入：firstList = [[1,7]], secondList = [[3,10]]
输出：[[3,7]]

class Solution {
    public int[][] intervalIntersection(int[][] firstList, int[][] secondList) {
        List<int[]> resultList=new ArrayList<>();     //同样用到集合和数组之间的转换！
        int i=0;
        int j=0;
        while(i<firstList.length && j<secondList.length){
            if(!(firstList[i][1]<secondList[j][0] || firstList[i][0]>secondList[j][1])) {   //找出两个区间是否有交集是重点！非常容易漏掉情况！
                int start=Math.max(firstList[i][0],secondList[j][0]);                       //所以先找出两个区间没有交集的情况（2种，不容易漏掉） 再取反即为两个区间有交集！
                int end=Math.min(firstList[i][1],secondList[j][1]);                         //画图可知，有交集的情况为四种，总结为：左选大，右选小
                resultList.add(new int[]{start,end});
            }
            if(secondList[j][1]>firstList[i][1]){     //i、j何时++的条件是重点！！
                i++;
            }else{
                j++;
            }
        }
        int[][] resultArray=new int[resultList.size()][];
        resultList.toArray(resultArray);
        return resultArray;
    }
}
