给定一个二叉树，找出其最小深度。
最小深度是从根节点到最近叶子节点的最短路径上的节点数量。
说明：叶子节点是指没有子节点的节点。
输入：root = [3,9,20,null,null,15,7]
输出：2

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int minDepth(TreeNode root) {
        if(root==null) return 0;
        Queue<TreeNode> queue=new LinkedList<>();    //Queue是接口，先进先出，LinkedList是实现该接口的一个类
        queue.offer(root);
        int mindepth=1;      //注意这里是1！ root 本身就是一层，depth 初始化为1

        while(!queue.isEmpty()){
            int queueSize=queue.size();      //这一句不可缺少！queue队列的内容在进入for循环后会不断改变，因此要提前取出每一层的queueSize值！
            for(int i=0;i<queueSize;i++){
                TreeNode current=queue.poll();
                if(current.left==null && current.right==null) return mindepth;
                if(current.left!=null)  queue.offer(current.left);
                if(current.right!=null) queue.offer(current.right);
            }
            mindepth++;   
        }
        return mindepth;  //这一句同样不可缺少！有返回值的方法必须最终有返回值！
    }
}
