n 皇后问题 研究的是如何将 n 个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻击。

给你一个整数 n ，返回所有不同的 n 皇后问题 的解决方案。

每一种解法包含一个不同的 n 皇后问题 的棋子放置方案，该方案中 'Q' 和 '.' 分别代表了皇后和空位。
输入：n = 4
输出：[[".Q..","...Q","Q...","..Q."],["..Q.","Q...","...Q",".Q.."]]
解释：如上图所示，4 皇后问题存在两个不同的解法。

提示：
1 <= n <= 9
皇后彼此不能相互攻击，也就是说：任何两个皇后都不能处于同一条横行、纵行或斜线上。


class Solution {
    List<List<String>> result=new ArrayList<>();    //同样需要在函数外声明定义结果
    
    public List<List<String>> solveNQueens(int n) {
        char[][] board=new char[n][n];           //虽然返回结果是二维List，装着String，但可以将List<String>（这个就是每次棋盘上的结果）看成是二维char数组，后面操作更方便！
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                board[i][j]='.';           //对棋盘初始化，没有皇后的情况
            }
        }
        backtrack(board,0);            //从第0排开始放皇后
        return result;

    }

    public void backtrack(char[][] board,int row){
        if(row==board.length){        //当每一排都放置了一个皇后之后，一次结果形成
            List<String> boardList=new ArrayList<>();      //注意：由于用了二维char数组，要将其还原为List<String>形式！！
            for(int i=0;i<board.length;i++){               //即需要将二维数组中的第二维内容从char[]转换为String
                String temp=new String(board[i]);
                boardList.add(temp);
            }
            result.add(boardList);
            return;
        };
        for(int col=0;col<board.length;col++){         //固定了row，对每一列col寻找可以放皇后的位置
            if(!isValid(board,row,col)) continue;
            board[row][col]='Q';
            backtrack(board,row+1);       //进入下一行的寻找
            board[row][col]='.';          //这里的撤回操作，直接将放皇后的位置变为不放皇后即可
            
        }
    
    }

    public boolean isValid(char[][] board,int row,int col){      //验证当前棋盘的位置以及行、列是否可以放皇后
        for(int i=0;i<board.length;i++){
            if(board[i][col]=='Q') return false;     //注意这里容易出错，寻找当前列上的每一行是否有皇后，所以是固定列col，对每一行进行遍历
        }
        for(int i=row-1,j=col+1;i>=0 && j<board.length;i--,j++){     //注意迭代条件i>=0 && j<board.length的语法问题！   表示且的时候只能用&& 而不能用逗号！
            if(board[i][j]=='Q') return false;
        }
        for(int i=row-1,j=col-1;i>=0 && j>=0;i--,j--){
            if(board[i][j]=='Q') return false;
        }
        return true;
    }
}
