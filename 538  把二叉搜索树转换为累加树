给出二叉 搜索 树的根节点，该树的节点值各不相同，请你将其转换为累加树（Greater Sum Tree），使每个节点 node 的新值等于原树中大于或等于 node.val 的值之和。

注意 二叉搜索树满足下列约束条件：

节点的左子树仅包含键 小于 节点键的节点。
节点的右子树仅包含键 大于 节点键的节点。
左右子树也必须是二叉搜索树。

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
 
class Solution {
    int sum;   //同样注意sum声明在方法外！
    
    public TreeNode convertBST(TreeNode root) {
        traverse(root);
        return root;
    }

    void traverse(TreeNode root){   //这个函数的作用是后序遍历 使得二叉搜索树呈降序排列的结果！非常关键！
        if(root==null) return;
        traverse(root.right);  //后序遍历 注意先traverse(root.right)  再traverse(root.left) 
        sum +=root.val;    
        root.val=sum;   //这一句非常重要 稍微有点难理解！ 由于是降序排列 则遍历后得到的sum结果均是由大于或等于自己(root)的数相加而得 即为新节点的数值 直接将其赋给root.val  ！！深刻体会！
        traverse(root.left);
    }
}
