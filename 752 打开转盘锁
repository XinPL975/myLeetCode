你有一个带有四个圆形拨轮的转盘锁。每个拨轮都有10个数字： '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' 。每个拨轮可以自由旋转：例如把 '9' 变为  '0'，'0' 变为 '9' 。每次旋转都只能旋转一个拨轮的一位数字。

锁的初始数字为 '0000' ，一个代表四个拨轮的数字的字符串。

列表 deadends 包含了一组死亡数字，一旦拨轮的数字和列表里的任何一个元素相同，这个锁将会被永久锁定，无法再被旋转。

字符串 target 代表可以解锁的数字，你需要给出最小的旋转次数，如果无论如何不能解锁，返回 -1。

示例 1:

输入：deadends = ["0201","0101","0102","1212","2002"], target = "0202"
输出：6
解释：
可能的移动序列为 "0000" -> "1000" -> "1100" -> "1200" -> "1201" -> "1202" -> "0202"。
注意 "0000" -> "0001" -> "0002" -> "0102" -> "0202" 这样的序列是不能解锁的，
因为当拨动到 "0102" 时这个锁就会被锁定。

提示：

	死亡列表 deadends 的长度范围为 [1, 500]。
	目标数字 target 不会在 deadends 之中。
	每个 deadends 和 target 中的字符串的数字会在 10,000 个可能的情况 '0000' 到 '9999' 中产生。


class Solution {
    public int openLock(String[] deadends, String target) {
        Set<String> deads=new HashSet<>();
        for(String dead:deadends){
            deads.add(dead);
        }
        Set<String> visited=new HashSet<>();
        Queue<String> queue=new LinkedList<>();
        queue.offer("0000");
        visited.add("0000");
        int num=0;   //这里和111题不同，初始num为0；因为还没有转动转盘锁

        while(!queue.isEmpty()){
            int queueSize=queue.size();
            for(int i=0;i<queueSize;i++){
                String current=queue.poll();
                if(deads.contains(current)) continue;
                if(current.equals(target)) return num;   //注意！！这里只能用equals()方法，不能用==判断是否相等，因为用了new String("***")!
                for(int j=0;j<4;j++){
                    String up=plusone(current,j);
                    if(!visited.contains(up)){   //一定要先判断是否是重复的号码 再决定是否加入队列和Set！
                        queue.offer(up);
                        visited.add(up);
                    }
                    String down =minusone(current,j);
                    if(!visited.contains(down)){
                        queue.offer(down);
                        visited.add(down);
                    }
                }
                
            }
            num++;
        }
        return -1;   //注意最后返回的是-1，代表遍历完都没有找到正确目标
    }

    public String plusone(String current,int i){
        char[] temp=current.toCharArray();   //String和char[]数组的转换 用得很多！
        if(temp[i]=='9'){
            temp[i]='0';
        }else{
            temp[i] +=1;
        }
        return new String(temp);
    }

    public String minusone(String current,int i){
        char[] temp=current.toCharArray();
        if(temp[i]=='0'){
            temp[i]='9';
        }else{
            temp[i] -=1;
        }
        return new String(temp);
    }
}
